{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/profile.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/scripts/index.js"],"sourcesContent":["export class Profile {\r\n  constructor(data = {}) {\r\n    this.data = data; // Используем сеттер при инициализации\r\n  }\r\n\r\n  set data({ name, about, avatar, _id, cohort } = {}) {\r\n    Object.assign(this, { name, about, avatar, _id, cohort });\r\n  }\r\n\r\n  get data() {\r\n    return {\r\n      name: this.name,\r\n      about: this.about,\r\n      avatar: this.avatar,\r\n      _id: this._id,\r\n      cohort: this.cohort,\r\n    };\r\n  }\r\n}\r\n","//* Шаблон карточки\r\nconst cardTemplate = document.querySelector(\"#card-template\").content;\r\n\r\n//* Функция создания карточки\r\nconst createCard = (card, profileId, { onShow, onDelete, onLike } = {}) => {\r\n  // Клонирование карточки по шаблону\r\n  const newCard = cardTemplate\r\n    .querySelector(\".places__item.card\")\r\n    .cloneNode(true);\r\n  // Если клон успешно создан, то его инициализация\r\n  if (newCard) {\r\n    // Сохранение Id карточки (для removeCard() - удаления со страницы)\r\n    newCard.dataset.cardId = card._id;\r\n\r\n    // Картинка карточки\r\n    const cardImage = newCard.querySelector(\".card__image\");\r\n\r\n    if (cardImage) {\r\n      // Данные карточки\r\n      cardImage.src = card.link;\r\n      cardImage.alt = card.name;\r\n      // Обработчик открытия popup просмотра карточки\r\n      cardImage.addEventListener(\"click\", () => {\r\n        onShow(card); // открываем popup\r\n      });\r\n    }\r\n\r\n    // Отображение заголовка карточки\r\n    newCard.querySelector(\".card__title\").textContent = card.name;\r\n\r\n    // Обработчик удаления карточки (автоматически удаляется после первого срабатывания)\r\n    const deleteButton = newCard.querySelector(\".card__delete-button\");\r\n    if (deleteButton && profileId) {\r\n      // Если карточка - своя, то добавляем обработчик удаления,\r\n      // если нет - скрываем кнопку  удаления\r\n      if (card.owner._id === profileId) {\r\n        deleteButton.addEventListener(\r\n          \"click\",\r\n          () => {\r\n            onDelete(card._id); // card._id - для удаления\r\n          },\r\n          { once: true }\r\n        );\r\n      } else deleteButton.remove();\r\n    }\r\n\r\n    // Обработка like/dislike карточки по кнопке 🤍\r\n    const likeButton = newCard.querySelector(\".card__like-button\");\r\n    const cardLikeCount = newCard.querySelector(\".card__like-count\");\r\n\r\n    if (likeButton)\r\n      likeButton.addEventListener(\"click\", () => {\r\n        onLike(\r\n          card._id,\r\n          !likeButton.classList.contains(\"card__like-button_is-active\")\r\n        )\r\n          .then((count) => {\r\n            likeCard(likeButton); // 🤍<=>🩷\r\n            cardLikeCount.textContent = count; // количества like\r\n          })\r\n          .catch((err) => {\r\n            console.log(\"Ошибка like/dislike карточки: \", err);\r\n          });\r\n      });\r\n\r\n    // Начальное (при создании списка карточек) отображение like-свойств карточки\r\n    if (card.likes && Array.isArray(card.likes)) {\r\n      // Отображение like\r\n      if (card.likes.some((like) => like._id === profileId)) {\r\n        likeButton.classList.add(\"card__like-button_is-active\");\r\n      }\r\n      // Отображение количества like карточки\r\n      if (cardLikeCount) {\r\n        cardLikeCount.textContent = card.likes.length;\r\n      }\r\n    }\r\n  }\r\n  return newCard;\r\n};\r\n\r\n//* Обработчик like/dislike карточки (🤍<=>🩷/)\r\nfunction likeCard(likeButton) {\r\n  if (likeButton) likeButton.classList.toggle(\"card__like-button_is-active\");\r\n}\r\n\r\n//* Функция удаления карточки\r\nconst removeCard = (cardId) => {\r\n  // Поиск карточки по ее cardId\r\n  const card = document.querySelector(\r\n    `.places__item.card[data-card-id=\"${cardId}\"]`\r\n  );\r\n  // Удаление карточки со страницы\r\n  if (card) {\r\n    card.remove(); // удаление\r\n    card = null; //  пометка для GC\r\n  }\r\n};\r\n\r\nexport { createCard, removeCard, likeCard };\r\n","//! Константы модуля\r\n// CSS-классы\r\nconst CSS_CLASSES = {\r\n  isOpen: \"popup_is-opened\", // открытого popup\r\n  closer: \".popup__close\", // элемента (кнопки), закрывающего окно\r\n  contentWrapper: \".popup__content\", // wrappera контента окна\r\n};\r\n\r\n//! Открытие popup\r\nfunction openModal(popup) {\r\n  if (popup && popup.classList.contains(\"popup\")) {\r\n    // Назначение обработчика закрытия popup по кнопке Esc\r\n    document.addEventListener(\"keydown\", handleEscWrapper);\r\n    popup.classList.add(CSS_CLASSES.isOpen); // отображение popup\r\n  }\r\n}\r\n\r\n//! Wrapper обработчика события закрытия окна по Esc\r\n/*  \r\n  ОТКРЫТОЕ модальное окно может быть ТОЛЬКО ОДНО. Если необходимо \r\n  открыть новое модальное окно, текущее модальное окно необходимо \r\n  закрыть.\r\n*/\r\nfunction handleEscWrapper(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const popups = document.querySelectorAll(\".popup\");\r\n    if (popups) {\r\n      //* Поиск первого открытого popup\r\n      const openPopup = Array.from(popups).find((popup) => {\r\n        if (popup && popup.classList.contains(\"popup_is-opened\")) return popup;\r\n      });\r\n      //* Закрытие первого найденного открытого popup\r\n      closeModal(openPopup);\r\n    }\r\n  }\r\n}\r\n\r\n//! Закрытие popup\r\nfunction closeModal(popup) {\r\n  if (popup && popup.classList.contains(\"popup\")) {\r\n    // Удаление listner, закрывающего popup по Esc\r\n    document.removeEventListener(\"keydown\", handleEscWrapper);\r\n    // Cкрытие popup\r\n    popup.classList.remove(CSS_CLASSES.isOpen);\r\n  }\r\n}\r\n\r\n//! Инициализация модального окна\r\nconst initializeModal = (popup) => {\r\n  if (popup && popup.classList.contains(\"popup\")) {\r\n    //* Добавление модификатора popup для анимации при его открытии/закрытии\r\n    if (!popup.classList.contains(\"popup_is-animated\"))\r\n      popup.classList.add(\"popup_is-animated\");\r\n\r\n    //* Назначение обработчиков закрытия popup по...\r\n    //... кнопке ❌ popup просмотра карточки\r\n    const btnClose = popup.querySelector(\"button.popup__close\");\r\n    if (btnClose)\r\n      btnClose.addEventListener(\"click\", () => {\r\n        closeModal(popup);\r\n      });\r\n    //... click вне границ popup просмотра карточки\r\n    popup.addEventListener(\"mousedown\", (evt) => {\r\n      const isInsideClick = !!evt.target.closest(\".popup__content\");\r\n      if (!isInsideClick) closeModal(popup);\r\n    });\r\n  }\r\n};\r\n\r\nexport { openModal, closeModal, initializeModal };\r\n","let CONFIG = {}; //! параметры конфигурации валидации\r\n\r\n//! Контроль доспности submit-кнопки (disable=true - кнопка блокирована)\r\nconst enableButton = (button, disable) => {\r\n  button.disabled = disable;\r\n  if (disable) button.classList.add(CONFIG.inactiveButtonClass);\r\n  else button.classList.remove(CONFIG.inactiveButtonClass);\r\n};\r\n\r\n//! Определение валидности полей ввода\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\n\r\n//! Управление доступностью submit-кнопки по состоянию полей ввода:\r\n//! если хотя бы один input невалидный, то submit-кнопка не доступна\r\nconst toggleButtonState = (inputList, button) => {\r\n  enableButton(button, hasInvalidInput(inputList));\r\n};\r\n\r\n//!\r\nconst showInputError = (form, input, errorMessage) => {\r\n  const errorElement = form.querySelector(`.${input.id}-error`);\r\n  input.classList.add(CONFIG.inputErrorClass);\r\n  errorElement.classList.add(CONFIG.errorClass);\r\n  errorElement.textContent = errorMessage;\r\n};\r\n\r\n//!\r\nconst hideInputError = (form, input) => {\r\n  const errorElement = form.querySelector(`.${input.id}-error`);\r\n  input.classList.remove(CONFIG.inputErrorClass);\r\n  errorElement.classList.remove(CONFIG.errorClass);\r\n  errorElement.textContent = \"\";\r\n};\r\n\r\n//! Контроль отображения кастомного сообщения об ошибке ввода\r\nconst isValid = (form, input) => {\r\n  if (input.validity.patternMismatch)\r\n    input.setCustomValidity(input.dataset.errorMessage);\r\n  else input.setCustomValidity(\"\");\r\n\r\n  //* Управление отображением сообщения об ошибке ввода в input\r\n  if (!input.validity.valid)\r\n    showInputError(form, input, input.validationMessage);\r\n  else hideInputError(form, input);\r\n};\r\n\r\n//! Добавление обработчиков всем input выбранной формы\r\nconst setEventListeners = (form) => {\r\n  const inputList = Array.from(form.querySelectorAll(CONFIG.inputSelector));\r\n  const button = form.querySelector(CONFIG.submitButtonSelector);\r\n\r\n  // Состояние кнопки перед вводом данных в input\r\n  toggleButtonState(inputList, button);\r\n\r\n  // Добавление обработчиков всем полям ввода формы\r\n  inputList.forEach((input) => {\r\n    input.addEventListener(\"input\", () => {\r\n      //* Контроль отображения кастомного сообщения об ошибке ввода\r\n      isValid(form, input);\r\n      toggleButtonState(inputList, button);\r\n    });\r\n  });\r\n  // }\r\n};\r\n\r\n//! Включение валидации (обработчиков событий)\r\nfunction enableValidation({\r\n  formSelector,\r\n  inputSelector,\r\n  submitButtonSelector,\r\n  inactiveButtonClass,\r\n  inputErrorClass,\r\n  errorClass,\r\n} = {}) {\r\n  CONFIG = arguments[0]; // Инициализация параметров конфигурации модуля\r\n\r\n  // Создание списка форм с input-полями\r\n  const formsList = Array.from(\r\n    document.querySelectorAll(\r\n      `${CONFIG.formSelector}:has(${CONFIG.inputSelector})`\r\n    )\r\n  );\r\n  // Добавление обработчиков полям выбранных форм\r\n  formsList.forEach((form) => {\r\n    setEventListeners(form);\r\n  });\r\n}\r\n\r\n//! Очистка ошибок валидации формы и деактивация кнопки (при неудачной валидации)\r\nfunction clearValidation(form) {\r\n  // Очистка ошибок ввода данных в поля формы\r\n  const inputList = Array.from(form.querySelectorAll(CONFIG.inputSelector));\r\n  inputList.forEach((input) => hideInputError(form, input));\r\n\r\n  // Деактивация submit-кнопки\r\n  const button = form.querySelector(CONFIG.submitButtonSelector);\r\n  enableButton(button, true);\r\n}\r\n\r\nexport { enableValidation, clearValidation };\r\n","//! Авторизация и доступ\r\nconst BASE_URL = \"https://nomoreparties.co/v1/wff-cohort-35/\"; // базовый url\r\n// const API_TOKEN = process.env.API_TOKEN; // токен\r\nconst API_TOKEN = \"daac000b-c031-49fc-9356-0394a8a42db9\"; // токен\r\n\r\n//! Унифицированная функция запроса к серверу, возвращающая его ответ\r\nconst httpBaseQuery = ({ url, method = \"GET\", headers = {}, body = null }) => {\r\n  return fetch(url, {\r\n    method,\r\n    headers,\r\n    ...(body && { body: JSON.stringify(body) }),\r\n  });\r\n};\r\n\r\n//! Функция авторизированного запроса к серверу, возвращающая объект ответа\r\nconst httpQuery = ({ endURL, method, headers = {}, body }) => {\r\n  headers.authorization = API_TOKEN;\r\n  return httpBaseQuery({ url: BASE_URL + endURL, method, headers, body }).then(\r\n    (resp) => {\r\n      if (resp.ok) return resp.json();\r\n      return Promise.reject(`Ошибка: ${resp.status}`);\r\n    }\r\n  );\r\n};\r\n\r\n//! Прикладные функции запросов\r\n\r\n//* Запрос карточек мест (не только своих)\r\nconst getCards = () => {\r\n  return httpQuery({ endURL: \"cards\" });\r\n};\r\n\r\n//* Запрос добавления новой карточки\r\nconst saveCard = (body) => {\r\n  if (body.name && body.link) {\r\n    // Проверка: тип контента body.link - изображение?\r\n    return getHeaders(body.link).then((resp) => {\r\n      if (!resp.ok) return Promise.reject(resp.status);\r\n      const contentType = resp.headers.get(\"Content-Type\"); // тип контента в ответе\r\n      if (!contentType || !contentType.startsWith(\"image/\"))\r\n        return Promise.reject(`ссылка не на картинку`);\r\n      // Сохранение карточки на сервере\r\n      return httpQuery({\r\n        endURL: \"cards\",\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body,\r\n      }).then((saveResp) => saveResp);\r\n    });\r\n  }\r\n};\r\n\r\n//* Запрос удаления карточки по ее Id\r\nconst deleteCard = (cardId) => {\r\n  return httpBaseQuery({\r\n    url: `${BASE_URL}cards/${cardId}`,\r\n    method: \"DELETE\",\r\n    headers: { authorization: API_TOKEN },\r\n  });\r\n};\r\n\r\n//* Запрос данных своего профиля\r\nconst getProfile = () => {\r\n  return httpQuery({ endURL: \"users/me\" });\r\n};\r\n\r\n//* Изменение профиля\r\nconst setProfile = (body) => {\r\n  return httpQuery({\r\n    endURL: \"users/me\",\r\n    method: \"PATCH\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body,\r\n  });\r\n};\r\n\r\n//* Запрос MIME-типа в заголовке\r\nconst getHeaders = (url) => {\r\n  return httpBaseQuery({\r\n    url,\r\n    method: \"HEAD\",\r\n    mode: \"cors\", // для кросс-доменных запросов\r\n    cache: \"no-cache\", // игнорируем кеш\r\n  });\r\n};\r\n\r\n//* Изменение аватара профиля\r\nconst setProfileAvatar = (body) => {\r\n  return httpQuery({\r\n    endURL: \"users/me/avatar\",\r\n    method: \"PATCH\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body,\r\n  });\r\n};\r\n\r\nconst evaluateCard = (cardId, like) => {\r\n  return httpQuery({\r\n    endURL: `cards/likes/${cardId}`,\r\n    method: like ? \"PUT\" : \"DELETE\",\r\n  });\r\n};\r\n\r\nexport {\r\n  getCards,\r\n  getProfile,\r\n  setProfile,\r\n  setProfileAvatar,\r\n  getHeaders,\r\n  saveCard,\r\n  deleteCard,\r\n  evaluateCard,\r\n};\r\n","// import initialCards from \"../components/cards.js\";\nimport { Profile } from \"../components/profile.js\";\nimport { createCard, removeCard } from \"../components/card.js\";\nimport { openModal, closeModal, initializeModal } from \"../components/modal.js\";\nimport { enableValidation, clearValidation } from \"../components/validation.js\";\nimport \"../pages/index.css\";\n\nimport {\n  getCards,\n  getProfile,\n  setProfile,\n  setProfileAvatar,\n  getHeaders,\n  saveCard,\n  deleteCard,\n  evaluateCard,\n} from \"../components/api.js\";\n\n//! Профиль\nconst profile = new Profile();\n\n//! Селекторы\nconst SELECTORS = {\n  formSelector: \".popup__form\",\n  inputSelector: \".popup__input\",\n  submitButtonSelector: \".popup__button\",\n  inactiveButtonClass: \"popup__button_inactive\",\n  inputErrorClass: \"popup__input_type_error\",\n  errorClass: \"popup__error_visible\",\n};\n\n//!  DOM узлы\nconst cardsContainer = document.querySelector(\".places__list\"); // контейнер карточек\n//* popup's\nconst profilePopup = document.querySelector(\".popup.popup_type_edit\"); // редактирования профиля\nconst newCardPopup = document.querySelector(\".popup.popup_type_new-card\"); // создания карточки\nconst cardViewPopup = document.querySelector(\".popup.popup_type_image\"); // просмотра карточки\nconst avatarPopup = document.querySelector(\".popup_type_avatar\"); // просмотра карточки\nconst cardDelConfirmPopup = document.querySelector(\".popup_confirm-del-card\"); // просмотра карточки\n\n//* Кнопки открытия popup\nconst btnEditProfile = document.querySelector(\".profile__edit-button\"); // редактирования профиля\nconst btnAddCard = document.querySelector(\".profile__add-button\"); // добавления новой карточки\n\n//* Источники данных для форм popup\nconst nameProfile = document.querySelector(\".profile__title\"); // имя профиля\nconst descrProfile = document.querySelector(\".profile__description\"); // описание профиля\nconst avatarProfile = document.querySelector(\".profile__image\"); // описание профиля\n\n//* Элементы popup просмотра карточки\nconst imageCardViewPopup = cardViewPopup.querySelector(\"img.popup__image\");\nconst captionCardViewPopup = cardViewPopup.querySelector(\".popup__caption\");\n\n//* Inputs формы popup редактирования профиля\nconst nameProfilePopupInput = profilePopup.querySelector(\n  \"input.popup__input_type_name\"\n); // input имени профиля\nconst descrProfilePopupInput = profilePopup.querySelector(\n  \"input.popup__input_type_description\"\n); // input описания профиля\n\n//* Input формы popup обновления аватар\nconst urlAvatarPopupInput = avatarPopup.querySelector(\n  \"input.popup__input_type_avatar\"\n);\n\n//! Обработчики событий\n\n//* Обработчик отображения popup просмотра карточки\nfunction handleShowCard(card) {\n  setupCardViewPopup(card); // настройка popup\n  if (cardViewPopup) openModal(cardViewPopup); // открытие popup\n}\n\n//! Назначение обработчиков событий ...\n\n(() => {\n  //* ... кнопки открытия popup редактирования профиля\n  if (btnEditProfile) {\n    btnEditProfile.addEventListener(\"click\", () => {\n      if (profilePopup) {\n        setupEditProfilePopup(); // настройка popup\n        openModal(profilePopup); // открытие popup\n\n        // Сброс ошибок ввода и деактивация submit-кнопки\n        const formEditProfile = profilePopup.querySelector(\".popup__form\");\n        clearValidation(formEditProfile);\n      }\n    });\n  }\n\n  //* ... кнопки открытия popup создания карточки\n  if (btnAddCard) {\n    // Добавление обработчика открытия модального окна и сброс формы\n    btnAddCard.addEventListener(\"click\", () => {\n      if (newCardPopup) {\n        resetNewCardPopupForm(); // сброс формы\n        openModal(newCardPopup); // открытие popup\n        // Сброс ошибок ввода и деактивация submit-кнопки\n        const formCardProfile = newCardPopup.querySelector(\".popup__form\");\n        clearValidation(formCardProfile);\n      }\n    });\n  }\n\n  //* ... кнопки открытия popup обновления аватар\n  if (avatarProfile) {\n    // Обработка наведения курсора на аватарку\n    avatarProfile.addEventListener(\"mouseenter\", () => {\n      avatarProfile.classList.add(\"avatar-edit_active\");\n    });\n\n    // Обработка ухода курсора на аватарку\n    avatarProfile.addEventListener(\"mouseleave\", () => {\n      avatarProfile.classList.remove(\"avatar-edit_active\");\n    });\n\n    // Обработка клика по аватарке\n    avatarProfile.addEventListener(\"click\", () => {\n      if (avatarProfile.classList.contains(\"avatar-edit_active\")) {\n        if (avatarPopup) {\n          setupAvatarPopup(); // настройка popup\n          openModal(avatarPopup); // открытие popup\n          // Сброс ошибок ввода и деактивация submit-кнопки\n          const formEditAvatar = avatarPopup.querySelector(\".popup__form\");\n          clearValidation(formEditAvatar);\n        }\n      }\n    });\n  }\n\n  //* ... закрытия popup и его преднастройка\n  const popups = document.querySelectorAll(\".popup\");\n  popups.forEach((popup) => {\n    initializeModal(popup);\n  });\n\n  //* ... submit-обработчика формам popup\n  setHandlerFormSubmit(\"edit-profile\", handleEditProfileSubmit);\n  setHandlerFormSubmit(\"new-place\", handleNewCardSubmit);\n  setHandlerFormSubmit(\"edit-avatar\", handleAvatarSubmit);\n  setHandlerFormSubmit(\"confirm-del-card\", handleCardDelSubmit);\n})();\n\nfunction setHandlerFormSubmit(formName, handler) {\n  if (document.forms[formName]) {\n    document.forms[formName].addEventListener(\"submit\", handler);\n  }\n}\n\nfunction handleEditProfileSubmit(evt) {\n  evt.preventDefault(); // блокировка стандартной обработки формы\n  toggleSubmitButtonText(profilePopup); // toggle текста submit-кнопки (\"Схранение...\")\n  const data = serializeForm(evt.target); // подготовка данных формы\n  // Данные из формы получены (объект для body запроса определен)?\n  if (data) {\n    // Отправка данных на сервер\n    setProfile(data)\n      .then((profileData) => {\n        renderProfile(profileData);\n        closeModal(profilePopup);\n      })\n      .catch((err) => {\n        console.log(err); // вывод ошибкb в консоль\n      })\n      .finally(() => {\n        toggleSubmitButtonText(profilePopup); // toggle текста submit-кнопки (\"Схранить\")\n      });\n  } else closeModal(profilePopup);\n}\n\nfunction handleNewCardSubmit(evt) {\n  evt.preventDefault(); // блокировка стандартной обработки формы\n  toggleSubmitButtonText(newCardPopup); // toggle текста submit-кнопки (\"Схранение...\")\n  const data = serializeForm(evt.target); // подготовка данных формы\n  // Данные из формы получены (объект для body запроса определен)?\n  if (data) {\n    // Отправка данных на сервер\n    saveCard({ name: data[\"place-name\"], link: data.link })\n      .then((respData) => {\n        if (respData) {\n          // Создание карточки\n          const newCard = createCard(respData, profile._id, {\n            onShow: handleShowCard,\n            onDelete: handleDeleteCard,\n            onLike: handleLikeCard,\n          });\n          // Добавление созданной карточки в начало списка\n          if (newCard && cardsContainer) cardsContainer.prepend(newCard);\n          closeModal(newCardPopup);\n        }\n      })\n      .catch((err) => {\n        console.log(\"Ошибка сохранения карточки:\", err); // вывод ошибкb в консоль\n      })\n      .finally(() => {\n        toggleSubmitButtonText(newCardPopup); // toggle текста submit-кнопки (\"Схранить\")\n      });\n  } else closeModal(newCardPopup);\n}\n\nfunction handleAvatarSubmit(evt) {\n  evt.preventDefault(); // блокировка стандартной обработки формы\n  toggleSubmitButtonText(avatarPopup); // toggle текста submit-кнопки (\"Схранение...\")\n  const data = serializeForm(evt.target); // подготовка данных формы\n\n  // Данные из формы получены (объект для body запроса определен)?\n  if (data && data.link) {\n    const avatar = data.link;\n    // Проверка: MIME-тип ссылки - image?\n    if (avatar) {\n      getHeaders(avatar)\n        .then((resp) => {\n          if (!resp.ok) return Promise.reject(resp.status);\n          // Проверка: тип контента - изображение?\n          const contentType = resp.headers.get(\"Content-Type\"); // тип контента в ответе\n          if (!contentType || !contentType.startsWith(\"image/\"))\n            return Promise.reject(`ссылка не на картинку`);\n          // Сохранение fetch-запросом ссылки на новый аватар\n          return setProfileAvatar({ avatar });\n        })\n        .then((avatarData) => {\n          renderProfile(avatarData); // вывод данных профиля и его аватар на страницу\n          closeModal(avatarPopup);\n        })\n        .catch((err) => {\n          console.log(\"Ошибка обновления аватар:\", err);\n        })\n        .finally(() => {\n          toggleSubmitButtonText(avatarPopup); // toggle текста submit-кнопки (\"Схранить\")\n        });\n    } else closeModal(avatarPopup);\n  } else closeModal(avatarPopup);\n}\n\nfunction handleCardDelSubmit(evt) {\n  evt.preventDefault(); // блокировка стандартной обработки формы\n  if (\"cardId\" in evt.target.dataset) {\n    const cardId = evt.target.dataset.cardId;\n    deleteCard(cardId)\n      .then((resp) => {\n        if (!resp.ok) return Promise.reject(resp.status);\n        closeModal(cardDelConfirmPopup);\n        removeCard(cardId); // удаление карточки со страницы\n      })\n      .catch((err) => {\n        console.log(\"Ошибка удаления карточки:\", err);\n      });\n    // Удаление аттрибута, хранящего Id карточки\n    delete evt.target.dataset.cardId;\n  } else closeModal(cardDelConfirmPopup);\n}\n\n//! Вспомогательные функции popup и его форм\n\n//* Изменение текста submit-кнопки popup в процессе сохранения\nfunction toggleSubmitButtonText(popup) {\n  if (popup) {\n    const button = popup.querySelector(\n      'button[type=\"submit\"].button.popup__button'\n    );\n    if (button) {\n      if (button.textContent.trim() === \"Сохранить\")\n        button.textContent = \"Сохранение...\";\n      else button.textContent = \"Сохранить\";\n    }\n  }\n}\n\n//* Преднастройка popup отображения карточки\nfunction setupCardViewPopup(card) {\n  // Трансфер данных из карточки в popup\n  if (card.name && card.link && imageCardViewPopup) {\n    // Картинка карточки\n    imageCardViewPopup.src = card.link;\n    imageCardViewPopup.alt = card.name;\n    // Название карточки\n    if (captionCardViewPopup) captionCardViewPopup.textContent = card.name;\n  }\n}\n\n//* Преднастройка popup редактирования профиля\nfunction setupEditProfilePopup() {\n  // Трансфер данных из страницы в popup\n  if (nameProfile && nameProfilePopupInput)\n    nameProfilePopupInput.value = nameProfile.textContent; // имя профиля\n  if (descrProfile && descrProfilePopupInput)\n    descrProfilePopupInput.value = descrProfile.textContent; // описание профиля\n}\n\n//* Преднастройка popup обновления аватара\nfunction setupAvatarPopup() {\n  // Трансфер url аватара из карточки в popup\n  if (avatarProfile && urlAvatarPopupInput) {\n    // Выделение адреса из backgroundImage\n    const urlMatch = avatarProfile.style.backgroundImage.match(\n      /url\\([\"']?([^\"')]+)[\"']?\\)/\n    );\n    const avatarURL = urlMatch ? urlMatch[1] : null;\n    // Передача URL аватара в input формы popup\n    if (avatarURL) urlAvatarPopupInput.value = avatarURL;\n  }\n}\n\n//* Сброс формы popup создания карточки\nfunction resetNewCardPopupForm() {\n  document.forms[\"new-place\"].reset(); // сброс формы (очистка полей)\n}\n\n//* Подготовка данных формы popup\n// Возвращает объект obj полей (input#name) и их значений формы form.\n// ( obj==={} ⇒ return undefined )\nfunction serializeForm(form) {\n  if (form) {\n    const { elements } = form;\n    const obj = {};\n    Array.from(elements)\n      .filter((item) => !!item.name)\n      .forEach((element) => {\n        const { name, value } = element;\n        obj[name] = value;\n      });\n    if (Object.keys(obj).length !== 0) return obj;\n  }\n}\n\nfunction handleDeleteCard(cardId) {\n  if (document.forms[\"confirm-del-card\"]) {\n    // Передаем Id карточки в popup подтверждения удаления карточки\n    document.forms[\"confirm-del-card\"].dataset.cardId = cardId;\n    openModal(cardDelConfirmPopup); // открытие popup\n  }\n}\n\nfunction handleLikeCard(cardId, like) {\n  // Запрос на постановку/удаление like (true/false)\n  return evaluateCard(cardId, like)\n    .then((card) => {\n      // Воврат количества like карточки\n      if (card.likes && Array.isArray(card.likes))\n        return Promise.resolve(card.likes.length);\n    })\n    .catch((err) => {\n      return Promise.reject(err);\n    });\n}\n\n//! Вывод карточек на страницу\nconst appendCards = (cardList, cards) => {\n  cards.forEach((card) => {\n    const newCard = createCard(card, profile._id, {\n      onShow: handleShowCard,\n      onDelete: handleDeleteCard,\n      onLike: handleLikeCard,\n    });\n    if (newCard) cardList.append(newCard);\n  });\n};\n\n//! Вывод данных профиля и его аватар на страницу\nconst renderProfile = ({ name, about, avatar }) => {\n  if (nameProfile && name) {\n    nameProfile.textContent = name;\n  }\n  if (descrProfile && about) {\n    descrProfile.textContent = about;\n  }\n  if (avatarProfile && avatar) {\n    avatarProfile.style.backgroundImage = `url(\"${avatar}\")`;\n  }\n};\n\nconst initializeApp = () => {\n  Promise.all([getProfile(), getCards()])\n    .then((resps) => {\n      // Обработка promise запроса данных профиля\n      if (resps[0]) {\n        profile.data = resps[0]; // обновлени локальных данных\n        renderProfile(resps[0]);\n      }\n      // Обработка promise запроса данных карточек мест\n      if (resps[1] && Array.isArray(resps[1]) && resps[1].length > 0) {\n        // Добавление карточек, полученных сс сервера\n        appendCards(cardsContainer, resps[1]);\n      }\n    })\n    .catch((err) => {\n      console.log(err); // вывод ошибкb в консоль\n    });\n};\n\n//! Инициализация (сразу после загрузил HTML и построения DOM-дерева)\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  //* Подключение валидации форм\n  enableValidation(SELECTORS);\n  initializeApp();\n});\n"],"names":["Profile","data","arguments","length","undefined","_classCallCheck","this","key","get","name","about","avatar","_id","cohort","set","_ref","Object","assign","cardTemplate","document","querySelector","content","createCard","card","profileId","onShow","onDelete","onLike","newCard","cloneNode","dataset","cardId","cardImage","src","link","alt","addEventListener","textContent","deleteButton","owner","once","remove","likeButton","cardLikeCount","classList","contains","then","count","toggle","likeCard","catch","err","console","log","likes","Array","isArray","some","like","add","CSS_CLASSES","openModal","popup","handleEscWrapper","evt","popups","querySelectorAll","closeModal","from","find","removeEventListener","CONFIG","enableButton","button","disable","disabled","inactiveButtonClass","toggleButtonState","inputList","inputElement","validity","valid","hasInvalidInput","hideInputError","form","input","errorElement","concat","id","inputErrorClass","errorClass","enableValidation","formSelector","inputSelector","submitButtonSelector","forEach","patternMismatch","setCustomValidity","errorMessage","showInputError","validationMessage","isValid","setEventListeners","clearValidation","BASE_URL","API_TOKEN","httpBaseQuery","url","_ref$method","method","_ref$headers","headers","_ref$body","body","fetch","_objectSpread","JSON","stringify","httpQuery","_ref2","endURL","_ref2$headers","authorization","resp","ok","json","Promise","reject","status","getHeaders","mode","cache","profile","SELECTORS","cardsContainer","profilePopup","newCardPopup","cardViewPopup","avatarPopup","cardDelConfirmPopup","btnEditProfile","btnAddCard","nameProfile","descrProfile","avatarProfile","imageCardViewPopup","captionCardViewPopup","nameProfilePopupInput","descrProfilePopupInput","urlAvatarPopupInput","handleShowCard","setupCardViewPopup","setHandlerFormSubmit","formName","handler","forms","toggleSubmitButtonText","trim","serializeForm","elements","obj","filter","item","element","value","keys","handleDeleteCard","handleLikeCard","evaluateCard","resolve","reset","urlMatch","style","backgroundImage","match","avatarURL","setupAvatarPopup","btnClose","target","closest","initializeModal","preventDefault","profileData","renderProfile","finally","contentType","startsWith","saveResp","saveCard","respData","prepend","avatarData","deleteCard","_readOnlyError","removeCard","all","resps","cardList","append"],"sourceRoot":""}